{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","handleUserSelect","useState","title","setTitle","completed","setCompletion","preparedTodos","filter","todo","toLowerCase","includes","className","action","htmlFor","name","type","value","onChange","event","target","length","map","classNames","readOnly","checked","onClick","userId","id","getAllTodos","a","fetch","response","ok","Error","status","statusText","json","getUserById","user","CurrentUser","state","showErrorMessage","handleClearButton","setState","clear","props","clearUser","this","loadData","prevProps","email","phone","React","Component","App","selectedUserId","onUserSelect","handleInputChange","handleClearUser","ReactDOM","render","document","getElementById"],"mappings":"yYAQaA,EAA2B,SAAC,GAGlC,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,iBAEA,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAmCF,mBAAS,gBAA5C,mBAAOG,EAAP,KAAkBC,EAAlB,KAoBMC,EAjBGP,EAAMQ,QAAO,SAAAC,GAClB,OAAIN,EACKM,EAAKN,MAAMO,cAAcC,SAASR,EAAMO,eAG/B,cAAdL,EACKI,EAAKJ,UAGI,kBAAdA,GACMI,EAAKJ,UAGRI,KAMX,OACE,sBAAKG,UAAU,WAAf,UACE,6CACA,uBAAMC,OAAO,OAAb,UACE,8BACE,wBAAOC,QAAQ,QAAf,mBAEG,IACD,uBACEF,UAAU,QACVG,KAAK,QACLC,KAAK,OACLC,MAAOd,EACPe,SAAU,SAACC,GAAD,OAAWf,EAASe,EAAMC,OAAOH,eAIjD,8BACE,wBAAOH,QAAQ,QAAf,wBAEG,IACD,yBACEC,KAAK,YACLE,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAWb,EAAca,EAAMC,OAAOH,QAHlD,UAKE,wBACEA,MAAM,eADR,0BAMA,wBACEA,MAAM,YADR,uBAKA,wBACEA,MAAM,gBADR,sCASR,wCACA,qBAAKL,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGL,EAAcc,OAAS,GAAKd,EAAce,KAAI,SAAAb,GAAI,OACjD,qBAEEG,UAAWW,IACT,CAAE,yBAA0Bd,EAAKJ,WACjC,CAAE,4BAA6BI,EAAKJ,YAJxC,UAOE,wBAAOS,QAAQ,aAAf,UACE,uBACEC,KAAK,aACLC,KAAK,WACLQ,UAAQ,EACRC,QAAShB,EAAKJ,YAEhB,4BAAII,EAAKN,WAGX,yBACEuB,QAAS,kBAAMzB,EAAiBQ,EAAKkB,SACrCf,UAAU,iEAKVI,KAAK,SAPP,qBAUGP,EAAKkB,YA1BHlB,EAAKmB,eCnFXC,G,MAAW,uCAAG,8BAAAC,EAAA,+EAEAC,MALV,2CAGU,WAEjBC,EAFiB,QAITC,GAJS,sBAKf,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAL5B,uBAQHJ,EAASK,OARN,cAQjBrC,EARiB,yBAUhBA,GAVgB,wCAYjB,IAAIkC,MAAJ,8CAZiB,0DAAH,sDAgBXI,EAAW,uCAAG,WAAOV,GAAP,iBAAAE,EAAA,sEACFC,MAAM,GAAD,OAnBZ,2CAmBY,YAAiBH,IADpB,WACnBI,EADmB,QAGXC,GAHW,sBAIjB,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAJ1B,uBAONJ,EAASK,OAPH,cAOnBE,EAPmB,yBASlBA,GATkB,2CAAH,sDCNXC,EAAb,4MACEC,MAAe,CACbF,KAAM,KACNG,kBAAkB,GAHtB,EAgBEC,kBAAoB,WAClB,EAAKC,SAAS,CAAEL,KAAM,QAGtBM,EAFc,EAAKC,MAAMC,cAlB7B,uDAME,WACEC,KAAKC,aAPT,gCAUE,SAAmBC,GACbA,EAAUvB,SAAWqB,KAAKF,MAAMnB,QAClCqB,KAAKC,aAZX,6DAuBE,4BAAAnB,EAAA,+EAEuBQ,EAAYU,KAAKF,MAAMnB,QAF9C,OAEUY,EAFV,OAIIS,KAAKJ,SAAS,CACZL,OACAG,kBAAkB,IANxB,gDASIM,KAAKJ,SAAS,CACZL,KAAM,KACNG,kBAAkB,IAXxB,yDAvBF,0EAuCE,WACE,IAAQH,EAASS,KAAKP,MAAdF,KAER,OACE,gCAEIA,GACE,sBAAK3B,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,kDAEG2B,EAAKX,QAIV,oBAAIhB,UAAU,oBAAd,SAAmC2B,EAAKxB,OACxC,mBAAGH,UAAU,qBAAb,SAAmC2B,EAAKY,QACxC,mBAAGvC,UAAU,qBAAb,SAAmC2B,EAAKa,QACxC,wBACEpC,KAAK,SACLU,QAASsB,KAAKL,kBAFhB,sBAWJK,KAAKP,MAAMC,iBACN,uEACD,YAtEd,GAAiCW,IAAMC,WCAjCC,E,4MACJd,MAAe,CACbe,eAAgB,EAChBxD,MAAO,I,EASTyD,aAAe,SAAC9B,GACd,EAAKiB,SAAS,CAAEY,eAAgB7B,K,EAGlC+B,kBAAoB,SAACvC,GAEnB,MAAwBA,EAAMC,OAAtBL,EAAR,EAAQA,KAAME,EAAd,EAAcA,MAEd,EAAK2B,UAAS,SAAAH,GAAK,kCACdA,GADc,kBAEhB1B,EAAOE,Q,EAIZ0C,gBAAkB,WAChB,EAAKf,SAAS,CAAEY,eAAgB,K,8FArBlC,4BAAA1B,EAAA,sEACsBD,IADtB,OACQ7B,EADR,OAGEgD,KAAKJ,SAAS,CAAE5C,UAHlB,gD,0EAwBA,WACE,MAGIgD,KAAKP,MAFPe,EADF,EACEA,eACAxD,EAFF,EAEEA,MAGF,OACE,sBAAKY,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACGoC,KAAKP,MAAMzC,MAAMqB,OAAS,GAEvB,cAAC,EAAD,CACErB,MAAOA,EACPC,iBAAkB+C,KAAKS,iBAK/B,qBAAK7C,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACG4C,EACC,cAAC,EAAD,CACET,UAAWC,KAAKW,gBAChBhC,OAAQ6B,IAER,8B,GAvDEH,IAAMC,WA+DTC,ICzEfK,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.09e4f9fe.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ninterface Prop {\n  todos: Todo[],\n  handleUserSelect: (userId: number) => void,\n}\nexport const TodoList: React.FC<Prop> = ({\n  todos,\n  handleUserSelect,\n}) => {\n  const [title, setTitle] = useState('');\n  const [completed, setCompletion] = useState('not selected');\n\n  const prepareTodos = () => {\n    return todos.filter(todo => {\n      if (title) {\n        return todo.title.toLowerCase().includes(title.toLowerCase());\n      }\n\n      if (completed === 'completed') {\n        return todo.completed;\n      }\n\n      if (completed === 'not completed') {\n        return !todo.completed;\n      }\n\n      return todo;\n    });\n  };\n\n  const preparedTodos = prepareTodos();\n\n  return (\n    <div className=\"TodoList\">\n      <p>Filter Todos</p>\n      <form action=\"Post\">\n        <div>\n          <label htmlFor=\"title\">\n            Title:\n            {' '}\n            <input\n              className=\"input\"\n              name=\"title\"\n              type=\"text\"\n              value={title}\n              onChange={(event) => setTitle(event.target.value)}\n            />\n          </label>\n        </div>\n        <div>\n          <label htmlFor=\"title\">\n            Completion:\n            {' '}\n            <select\n              name=\"completed\"\n              value={completed}\n              onChange={(event) => setCompletion(event.target.value)}\n            >\n              <option\n                value=\"not selected\"\n              >\n                not selected\n              </option>\n\n              <option\n                value=\"completed\"\n              >\n                completed\n              </option>\n              <option\n                value=\"not completed\"\n              >\n                not completed\n              </option>\n            </select>\n          </label>\n        </div>\n      </form>\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {preparedTodos.length > 0 && preparedTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                { 'TodoList__item checked': todo.completed },\n                { 'TodoList__item unchecked': !todo.completed },\n              )}\n            >\n              <label htmlFor=\"completion\">\n                <input\n                  name=\"completion\"\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                onClick={() => handleUserSelect(todo.userId)}\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n              >\n                User&nbsp;\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const TODO_URL = 'https://mate.academy/students-api/todos';\nconst USERS_URL = 'https://mate.academy/students-api/users/';\n\nexport const getAllTodos = async (): Promise<Todo[]> => {\n  try {\n    const response = await fetch(TODO_URL);\n\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    const todos = await response.json();\n\n    return todos;\n  } catch (error) {\n    throw new Error(`Error ocured because of this ${error}`);\n  }\n};\n\nexport const getUserById = async (id:number): Promise<User> => {\n  const response = await fetch(`${USERS_URL}/${id}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const user = await response.json();\n\n  return user;\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUserById } from '../../api/api';\n\ninterface Props {\n  userId: number,\n  clearUser: () => void,\n}\n\ninterface State {\n  user: User | null,\n  showErrorMessage: boolean,\n}\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    showErrorMessage: false,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps: { userId: number; }) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  handleClearButton = () => {\n    this.setState({ user: null });\n    const clear = this.props.clearUser;\n\n    clear();\n  };\n\n  async loadData() {\n    try {\n      const user = await getUserById(this.props.userId);\n\n      this.setState({\n        user,\n        showErrorMessage: false,\n      });\n    } catch (error) {\n      this.setState({\n        user: null,\n        showErrorMessage: true,\n      });\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div>\n        {\n          user && (\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  Selected user:\n                  {user.id}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{user.name}</h3>\n              <p className=\"CurrentUser__email\">{user.email}</p>\n              <p className=\"CurrentUser__phone\">{user.phone}</p>\n              <button\n                type=\"button\"\n                onClick={this.handleClearButton}\n              >\n                Clear\n              </button>\n            </div>\n          )\n        }\n\n        {\n          this.state.showErrorMessage\n            ? (<h1>Error ocured while loading user&apos; info</h1>)\n            : null\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[],\n\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getAllTodos();\n\n    this.setState({ todos });\n  }\n\n  onUserSelect = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement\n  | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState(state => ({\n      ...state,\n      [name]: value,\n    }));\n  };\n\n  handleClearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      todos,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {this.state.todos.length > 0\n            && (\n              <TodoList\n                todos={todos}\n                handleUserSelect={this.onUserSelect}\n              />\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                clearUser={this.handleClearUser}\n                userId={selectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}