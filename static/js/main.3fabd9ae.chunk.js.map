{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","handleUserSelect","title","onInputChange","completed","className","action","htmlFor","name","type","value","onChange","length","map","todo","readOnly","checked","onClick","userId","id","getAllTodos","a","fetch","response","ok","Error","status","statusText","json","getUserById","user","CurrentUser","state","showErrorMessage","handleClearButton","setState","undefined","this","loadData","prevProps","props","email","phone","React","Component","App","selectedUserId","onUserSelect","handleInputChange","event","target","prepareTodos","filter","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3fabd9ae.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\ninterface Prop {\n  todos: Todo[],\n  handleUserSelect: (userId: number) => void,\n  title: string,\n  completed: string,\n  onInputChange: (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLSelectElement>) => void\n}\nexport const TodoList: React.FC<Prop> = ({\n  todos,\n  handleUserSelect,\n  title,\n  onInputChange,\n  completed,\n}) => (\n  <div className=\"TodoList\">\n    <p>Filter Todos</p>\n    <form action=\"Post\">\n      <div>\n        <label htmlFor=\"title\">\n          Title:\n          {' '}\n          <input\n            className=\"input\"\n            name=\"title\"\n            type=\"text\"\n            value={title}\n            onChange={onInputChange}\n          />\n        </label>\n      </div>\n      <div>\n        <label htmlFor=\"title\">\n          Completion:\n          {' '}\n          <select\n            name=\"completed\"\n            value={completed}\n            onChange={onInputChange}\n          >\n            <option\n              value=\"not selected\"\n            >\n              not selected\n            </option>\n\n            <option\n              value=\"completed\"\n            >\n              completed\n            </option>\n            <option\n              value=\"not completed\"\n            >\n              not completed\n            </option>\n          </select>\n        </label>\n      </div>\n    </form>\n    <h2>Todos:</h2>\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.length > 0 && todos.map(todo => (\n          <li\n            key={todo.id}\n            className={todo.completed ? 'TodoList__item checked' : 'TodoList__item unchecked'}\n          >\n            <label htmlFor=\"completion\">\n              <input\n                name=\"completion\"\n                type=\"checkbox\"\n                readOnly\n                checked={todo.completed}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              onClick={() => handleUserSelect(todo.userId)}\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n            >\n              User&nbsp;\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","const TODO_URL = 'https://mate.academy/students-api/todos';\nconst USERS_URL = 'https://mate.academy/students-api/users/';\n\nexport const getAllTodos = async (): Promise<Todo[]> => {\n  try {\n    const response = await fetch(TODO_URL);\n\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    const todos = await response.json();\n\n    return todos;\n  } catch (error) {\n    throw new Error(`Error ocured because of this ${error}`);\n  }\n};\n\nexport const getUserById = async (id:number): Promise<User> => {\n  const response = await fetch(`${USERS_URL}/${id}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const user = await response.json();\n\n  return user;\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUserById } from '../../api/api';\n\ninterface Props {\n  userId: number,\n}\n\ninterface State {\n  user?: User,\n  showErrorMessage: boolean,\n}\nexport class CurrentUser extends React.Component<Props, State> {\n  state = {\n    user: {} as User,\n    showErrorMessage: false,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps: { userId: number; }) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  handleClearButton = () => {\n    this.setState({ user: undefined });\n  };\n\n  async loadData() {\n    try {\n      const user = await getUserById(this.props.userId);\n\n      this.setState({\n        user,\n        showErrorMessage: false,\n      });\n    } catch (error) {\n      this.handleClearButton();\n      this.setState({ showErrorMessage: true });\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div>\n        {\n          user && (\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  Selected user:\n                  {user.id}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{user.name}</h3>\n              <p className=\"CurrentUser__email\">{user.email}</p>\n              <p className=\"CurrentUser__phone\">{user.phone}</p>\n              <button\n                type=\"button\"\n                onClick={this.handleClearButton}\n              >\n                Clear\n              </button>\n            </div>\n          )\n        }\n\n        {\n          this.state.showErrorMessage\n            ? (<h1>Error ocured while loading user&apos; info</h1>)\n            : null\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[],\n  title: string,\n  completed: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    title: '',\n    completed: 'not selected',\n  };\n\n  async componentDidMount() {\n    const todos = await getAllTodos();\n\n    this.setState({ todos });\n  }\n\n  onUserSelect = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value } as unknown as Pick<State, keyof State>);\n  };\n\n  prepareTodos = () => {\n    const { todos, title, completed } = this.state;\n\n    return todos.filter(todo => {\n      if (title) {\n        return todo.title.toLowerCase().includes(title.toLowerCase());\n      }\n\n      if (completed === 'completed') {\n        return todo.completed;\n      }\n\n      if (completed === 'not completed') {\n        return !todo.completed;\n      }\n\n      return todo;\n    });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      title,\n      completed,\n    } = this.state;\n\n    const prepareTodos = this.prepareTodos();\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {this.state.todos.length > 0\n            && (\n              <TodoList\n                title={title}\n                completed={completed}\n                handleUserSelect={this.onUserSelect}\n                todos={prepareTodos}\n                onInputChange={this.handleInputChange}\n              />\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}